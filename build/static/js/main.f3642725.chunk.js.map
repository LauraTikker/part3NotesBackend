{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","toggleImportanceOf","find","n","changedNote","noteService","returnedNote","map","catch","error","setTimeout","useEffect","initialNotes","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","style","color","fontStyle","fontSize","ReactDOM","render","document","getElementById"],"mappings":"mNAeeA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAGtD,OACA,wBAAIC,UAAU,QACTJ,EAAKK,QACV,4BAAQC,QAASL,GAAmBC,K,gBCkBzB,EAxBA,WACb,IAAMK,EAAUC,IAAMC,IAHR,UAMRC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNT,WAAW,GAGb,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAjBR,SAiBsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAtBF,SAsBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,8NCpB3C,IAAMK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,yBAAKjB,UAAU,SACZiB,IAiHMC,EA3GH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAKVC,EAAcJ,EAAUJ,EAAQA,EAAMS,QAAO,SAAAjC,GAAI,OAAIA,EAAKG,aAoB1D+B,EAAqB,SAAAvB,GACzB,IAAMX,EAAOwB,EAAMW,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KAChC0B,E,yVAAW,IAAQrC,EAAR,CAAcG,WAAYH,EAAKG,YAEhDmC,EACU3B,EAAI0B,GACXxB,MAAK,SAAA0B,GACJd,EAASD,EAAMgB,KAAI,SAAAxC,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOuC,SAEpDE,OAAM,SAAAC,GACLX,EAAgB,SAAD,OAAU/B,EAAKK,QAAf,sCAEfsC,YAAW,WACTZ,EAAgB,QACf,KACHN,EAASD,EAAMS,QAAO,SAAAG,GAAC,OAAIA,EAAEzB,KAAOA,UAY1CiC,qBAAU,WACRN,IACGzB,MAAK,SAAAgC,GACJpB,EAASoB,QAGZ,IAuBH,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAcxB,QAASS,IAEvB,6BACE,4BAAQxB,QAAS,kBAAMuB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAhDeI,EAAYQ,KAAI,SAAAxC,GAAI,OACrC,kBAAC,EAAD,CACA8C,IAAK9C,EAAKW,GACVX,KAAMA,EACNC,iBAAkB,kBAAMiC,EAAmBlC,EAAKW,WA+C9C,0BAAMoC,SAnCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB7C,QAASqB,EACTd,MAAM,IAAIuC,MAAOC,cACjBjD,UAAWkD,KAAKC,SAAW,IAG7BhB,EACUY,GACLrC,MAAK,SAAA0B,GACFd,EAASD,EAAMR,OAAOuB,IACxBZ,EAAW,SAwBb,2BAAO4B,MAAO7B,EACd8B,SArBmB,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB5B,EAAWqB,EAAMW,OAAOJ,UAoBpB,4BAAQK,KAAK,UAAb,SAGF,mBA7FW,WAQb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,wGAkFF,Q,MCjHNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.f3642725.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Note = ({ note, toggleImportance }) => {  \r\n    const label = note.important ? 'make not important' : 'make important'\r\n\r\n\r\n    return (    \r\n    <li className='note'>\r\n        {note.content}\r\n    <button onClick={toggleImportance}>{label}</button>\r\n    </li>  \r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n\r\n  // adds here a nonexisting note that is not in the server. when we tried to change this note, a error message is shown.\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import Note from './components/Note'\nimport React, {useState, useEffect} from 'react'\nimport noteService from './services/notes'\n\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n\n  const Footer = () => {\n    \n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n\n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n      </div> \n    )\n\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(`Note '${note.content}' was already removed from server`)\n\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const rows = () => notesToShow.map(note =>\n    <Note       \n    key={note.id}      \n    note={note}\n    toggleImportance={() => toggleImportanceOf(note.id)}   \n    />  \n    )\n\n  useEffect(() => {\n    noteService.getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n            setNotes(notes.concat(returnedNote))\n          setNewNote('')\n        })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage}/>\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote}\n        onChange={handleNoteChange}/>\n        <button type=\"Submit\">save</button>\n      </form>\n\n      <Footer/>\n      </div>\n  )\n}\n\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  )"],"sourceRoot":""}